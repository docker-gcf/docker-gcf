#! /usr/bin/env python3
import json
import os
import subprocess
import sys


LOG_FILE_APPLY = '/var/log/gcf-apply.log'


def clear_env():
    vars = []
    for var in os.environ:
        if var.startswith('GCF__') or var == 'GCF':
            vars.append(var)
    for var in vars:
        del os.environ[var]


def get_value(data, key, default_value):
    current_node = data
    keys = key.split(':')
    for k in keys:
        if k in current_node:
            current_node = current_node[k]
        else:
            return default_value
    return current_node


def get_pillars():
    pillar_result = subprocess.run(['salt-call', '--local', '--skip-grains', '--out', 'json', 'pillar.items'],
                                   stdout=subprocess.PIPE)
    if pillar_result.returncode != 0:
        return None
    output_str = pillar_result.stdout.decode('utf-8')
    output_json = json.loads(output_str)
    local_node = get_value(output_json, 'local', {})
    return local_node


def main(argv):
    with open(LOG_FILE_APPLY, 'w') as f:
        pillar_result = subprocess.run(['gcf-apply'], stdout=f, stderr=f)
    if pillar_result.returncode != 0:
        print('Failed to run gcf-apply. Check {} for details.'.format(LOG_FILE_APPLY), file=sys.stderr)
        return pillar_result.returncode

    pillar = get_pillars()
    entrypoint = get_value(pillar, 'gcf:entrypoint', {})
    env_exports = get_value(entrypoint, 'env:exports', {})
    entrypoint_debug = get_value(entrypoint, 'debug', {})
    dbg_pillar_print = get_value(entrypoint_debug, 'pillar:print', False)
    dbg_env_clear = get_value(entrypoint_debug, 'env:clear', True)
    dbg_env_export = get_value(entrypoint_debug, 'env:export', True)
    dbg_cmd_execute = get_value(entrypoint_debug, 'cmd:execute', True)

    if dbg_pillar_print:
        print(json.dumps(pillar))

    if dbg_env_clear:
        clear_env()

    if dbg_env_export:
        for env_export in env_exports:
            os.environ[env_export] = env_exports[env_export]

    if dbg_cmd_execute:
        os.execvp(argv[1], argv[1:])

    return 0


if __name__ == '__main__':
    sys.exit(main(sys.argv))
